---
description: 
globs: 
alwaysApply: true
---
# Password Manager Backend Project Plan

## 1. Goals

*   Develop a secure, robust, and performant backend API using Python and Flask.
*   Utilize Flask Blueprints for modular and maintainable code structure.
*   Store user credentials securely in a MySQL database.
*   Implement strong authentication and multi-factor authentication (MFA) options.
*   Provide features for credential management, export, and password recovery.
*   Prioritize security best practices throughout the development lifecycle.

## 2. High-Level Tasks

### Phase 1: Foundation & Setup

*   **Task 1.1: Initialize Project Structure**
    *   Set up Python virtual environment.
    *   Initialize Flask application structure (`app.py`, configuration).
    *   Define base requirements (`requirements.txt` or `pyproject.toml`).
    *   *Architecture:* Plan initial Blueprint structure (e.g., `auth`, `credentials`, `users`, `security`, `utils`).
*   **Task 1.2: Database Setup**
    *   Configure MySQL database connection.
    *   Choose and configure an ORM (e.g., SQLAlchemy) for database interaction.
    *   Define initial database models (e.g., `User`, `Credential`).
    *   *Security:* Ensure secure database connection settings (credentials via env vars, SSL/TLS if applicable).
    *   *Performance:* Plan initial indexing strategies for core tables (e.g., `users.username`, `credentials.user_id`).
*   **Task 1.3: Core Utilities**
    *   Implement centralized configuration management.
    *   Set up logging framework.
    *   Define standard API response formats and error handling middleware.

### Phase 2: Authentication & User Management (`auth` & `users` Blueprints)

*   **Task 2.1: User Registration**
    *   Implement `/register` endpoint.
    *   Integrate Argon2 for password hashing.
    *   *Security:* Use strong Argon2 parameters, input validation (username, password complexity), prevent user enumeration.
*   **Task 2.2: User Login**
    *   Implement `/login` endpoint.
    *   Verify username and hashed password (Argon2).
    *   Implement session management (e.g., secure JWT or session cookies).
    *   *Security:* Implement rate limiting, secure session/token handling (HttpOnly, Secure, SameSite flags for cookies; appropriate JWT validation).
*   **Task 2.3: Basic User Profile (Optional)**
    *   Implement endpoints to view/update non-sensitive user information (if needed).

### Phase 3: Credential Management (`credentials` Blueprint)

*   **Task 3.1: Credential Encryption Foundation**
    *   Design strategy for generating, storing, and managing user-specific encryption keys.
    *   Implement core encryption/decryption service/utility functions (using a strong symmetric algorithm like AES-GCM).
    *   *Security:* Critically important to protect these keys. Consider deriving them from the user's master password + salt or using a dedicated key management system. Ensure authenticated encryption.
*   **Task 3.2: Credential CRUD Operations**
    *   Implement endpoints for creating, reading, updating, and deleting credentials (`/credentials` GET, POST; `/credentials/{id}` GET, PUT, DELETE).
    *   Integrate encryption/decryption for credential data before storing/after retrieving.
    *   *Security:* Ensure strict authorization checks (users can only access their *own* credentials). Encrypt sensitive fields *at rest*.
    *   *Performance:* Optimize database queries for credential listing and retrieval.

### Phase 4: Security Enhancements (`security` Blueprint)

*   **Task 4.1: OTP MFA**
    *   Implement endpoint for enabling OTP (generate secret, provide QR code/setup key).
    *   Implement endpoint for verifying OTP during login.
    *   Implement endpoint for disabling OTP.
    *   *Security:* Securely store OTP secrets associated with users. Use time-based OTP (TOTP). Protect setup and disablement processes (e.g., require password).
*   **Task 4.2: Email MFA**
    *   Implement endpoint for enabling/disabling email MFA notifications per login.
    *   Integrate email sending service.
    *   Trigger email notification upon successful primary authentication if enabled.
    *   *Security:* Configure email sending securely. Avoid including sensitive information directly in the email.

### Phase 5: Utilities & Recovery (`utils` Blueprint)

*   **Task 5.1: Password Export**
    *   Implement `/export` endpoint.
    *   Fetch user's credentials, decrypt them.
    *   Format credentials into CSV format.
    *   Create a password-protected ZIP archive containing the CSV.
    *   *Security:* Require re-authentication (password) before allowing export. Use strong ZIP encryption. Ensure temporary decrypted data is handled securely.
*   **Task 5.2: Forgot Password**
    *   Implement `/forgot-password` endpoint (takes email/username).
    *   Generate a secure, single-use, time-limited reset token.
    *   Store token hash associated with the user.
    *   Send password reset email with a link containing the token.
    *   *Security:* Protect against user enumeration. Use cryptographically secure token generation. Ensure HTTPS for reset links.
*   **Task 5.3: Reset Password**
    *   Implement `/reset-password/{token}` endpoint (takes token, new password).
    *   Validate token (exists, not expired, not used).
    *   Update user's password hash (using Argon2).
    *   Invalidate the reset token.
    *   *Security:* Enforce password complexity rules. Log successful password resets. Invalidate active sessions upon password reset.

### Phase 6: Testing & Deployment

*   **Task 6.1: Testing**
    *   Set up testing framework (e.g., `pytest`).
    *   Write unit tests for core logic (encryption, hashing, validation).
    *   Write integration tests for API endpoints.
    *   *Security:* Include tests for authorization logic and security controls.
*   **Task 6.2: Deployment**
    *   Containerize the application (Dockerfile).
    *   Configure WSGI server (e.g., Gunicorn, uWSGI).
    *   Set up production environment (database, environment variables).
    *   Configure HTTPS termination (e.g., via reverse proxy like Nginx).
    *   *Security:* Conduct security review/scan before deployment. Apply security hardening to the server environment.

## 3. Architecture & Security Principles

*   **Modularity:** Use Flask Blueprints to separate concerns.
*   **Separation of Concerns:** Keep API route handlers thin, delegate business logic to service layers/utilities.
*   **Input Validation:** Rigorously validate and sanitize *all* input from users/API clients.
*   **Least Privilege:** Ensure database users and application processes have only necessary permissions.
*   **Secure Defaults:** Configure Flask, dependencies, and the hosting environment securely.
*   **Dependency Management:** Keep dependencies up-to-date and scan for vulnerabilities.
*   **Defense in Depth:** Implement multiple layers of security controls (authentication, authorization, encryption, rate limiting, input validation).
*   **HTTPS Everywhere:** Ensure all communication is over HTTPS.