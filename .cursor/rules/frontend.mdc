---
description: 
globs: ui/**/*
alwaysApply: false
---
# Frontend Project Rules

- The backend Python flask app is routed through a vite proxy configuration from /api/ to to http://localhost:5005/api/
- Service classes wrap API endpoints using axios
- Service classes use `Client` and `Server` model objects where one contains a database ID, and the other does not for clear separations
- [react-utilities.tsx](mdc:ui/src/react-utilities.tsx) is used for various hooks (namly `useApi`, `ApiErrorFallback` and `ApiSuspense`)
- Use bootstrap CSS
- Use react-bootstrap components
- Use bootstrap-icons CSS
- Routing is defined largely in [routes.tsx](mdc:ui/src/routes.tsx)
- Page react components go into a `pages` sub-folder
- Utility react components go into a `components` sub-folder
- Service classes go into a `services` sub-folder
- Use ApiSuspense for areas that require data from the backend
- Use ApiErrorFallback above or below an area that displays data, or interacts with the data.


### useApi Usage

```typescript
const [apiCall, response, apiState, apiError] = useApi(
    async () => {
        const response = await service.method();
        return response.data;
    },
    (data) => {
        // Optional callback for successful response
    }
);
```

## Error Handling

### API Error Pattern
```typescript
<ApiErrorFallback api_error={apiError} />
```

### API Suspect Pattern
```typescript
<ApiSuspense 
    api_states={[apiState1, apiState2]} 
    suspense={<Spinner />}>
    {/* Content */}
</ApiSuspense>
```


### Form Input Pattern
```typescript
<Form.FloatingLabel label="Label">
    <Form.Control 
        value={value} 
        onChange={(e) => setValue(e.target.value)} 
    />
</Form.FloatingLabel>
```

### File Input Pattern
```typescript
const handleFileUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files.length > 0) {
        const file = e.target.files[0];
        const content = await file.text();
        // Process content
    }
};
```